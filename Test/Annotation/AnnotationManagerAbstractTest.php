<?php

namespace Ruon\Annotation;

require_once __DIR__ . '/../../Annotation/AnnotationManagerAbstract.php';

/**
 * Test class for AnnotationManagerAbstract.
 * Generated by PHPUnit on 2012-09-18 at 18:47:58.
 */
class AnnotationManagerAbstractTest extends \PHPUnit_Framework_TestCase
{
	public $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = $this->getMockForAbstractClass(
			'Ruon\\Annotation\\AnnotationManagerAbstract',
			array(),
			'',
			true,
			true,
			true,
			array()
		);
		$mockRepository = $this->getMockForAbstractClass(
			'Ruon\\Data\\DataRepositoryAbstract',
			array(),
			'',
			true,
			true,
			true,
			array('get', 'set')
		);
		$mockSource = $this->getMockForAbstractClass(
			'Ruon\\Annotation\\AnnotationSourceAbstract',
			array(),
			'',
			true,
			true,
			true,
			array('get')
		);
		$this->object->setRepository($mockRepository);
		$this->object->setSource($mockSource);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{

	}

	/**
	 * Ruon\Annotation\AnnotationManagerAbstract::getAnnotation
	 */
	public function testGetAnnotation()
	{
		$mockRepository = $this->object->getRepository();
		$class = $this->getMock('\\StdClass');
		$mockRepository
			->expects($this->at(0))
			->method('get')
			->with($this->equalTo(get_class($class)))
			->will($this->returnValue(null));

		$mockRepository
			->expects($this->at(1))
			->method('set');
		$result = $this->object->getAnnotation($class);
		$this->assertInstanceOf(
			'Ruon\\Annotation\\AnnotationSet', $result
		);
	}

	/**
	 * @covers Ruon\Annotation\AnnotationManagerAbstract::getRepository
	 * @covers Ruon\Annotation\AnnotationManagerAbstract::setRepository
	 */
	public function testGetSetRepository()
	{
		$mock = $this->getMockForAbstractClass(
			'Ruon\\Annotation\\AnnotationManagerAbstract',
			array(),
			'',
			true,
			true,
			true,
			array()
		);
		$mock->setRepository('test');
		$this->assertEquals('test', $mock->getRepository());
	}

	/**
	 * @covers Ruon\Annotation\AnnotationManagerAbstract::getSource
	 * @covers Ruon\Annotation\AnnotationManagerAbstract::setSource
	 */
	public function testGetSetSource()
	{
		$mock = $this->getMockForAbstractClass(
			'Ruon\\Annotation\\AnnotationManagerAbstract',
			array(),
			'',
			true,
			true,
			true,
			array()
		);
		$mock->setSource('test');
		$this->assertEquals('test', $mock->getSource());
	}
}