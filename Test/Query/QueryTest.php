<?php

namespace Ruon\Query;

/**
 * Test class for Query.
 * Generated by PHPUnit on 2012-05-11 at 22:28:48.
 */
class QueryTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Query
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{

	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	/**
	 * @covers Ruon\Query\Query::add
	 * @covers Ruon\Query\Query::getMainType
	 * @covers Ruon\Query\Query::getPart
	 * @covers Ruon\Query\Query::getParts
	 */
	public function testAdd()
	{
		$object = new Query;

		$mockFirst = $this->getMock(
			'stdClass',
			array('getType')
		);
		$mockFirst
			->expects($this->once())
			->method('getType')
			->with()
			->will($this->returnValue('FirstType'));

		$mockSecond = $this->getMock(
			'stdClass',
			array('getType')
		);
		$mockSecond
			->expects($this->once())
			->method('getType')
			->with()
			->will($this->returnValue('SecondType'));

		$mockThird = $this->getMock(
			'stdClass',
			array('getType')
		);
		$mockThird
			->expects($this->once())
			->method('getType')
			->with()
			->will($this->returnValue('SecondType'));

		$object
			->add($mockFirst, $mockSecond)
			->add($mockThird);

		$this->assertEquals('FirstType', $object->getMainType());

		$this->assertEquals(
			array($mockFirst),
			$object->getPart('FirstType')
		);

		$this->assertEquals(
			array($mockSecond, $mockThird),
			$object->getPart('SecondType')
		);

		$this->assertEquals(
			array(),
			$object->getPart('UnexistsType')
		);

		$this->assertEquals(
			array(
				'FirstType' => array($mockFirst),
				'SecondType' => array($mockSecond, $mockThird)
			),
			$object->getParts()
		);
	}

	/**
	 * @covers Ruon\Query\Query::instance
	 */
	public function testInstance()
	{
		$inst1 = Query::instance();
		$this->assertInstanceOf(__NAMESPACE__ . '\\Query', $inst1);

		$inst2 = Query::instance();
		$this->assertInstanceOf(__NAMESPACE__ . '\\Query', $inst2);

		$this->assertNotSame($inst2, $inst1);
	}

}
