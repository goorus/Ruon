<?php

namespace Ruon\Core\Loader;

/**
 * Test class for LoaderStandart.
 * Generated by PHPUnit on 2012-04-24 at 10:25:22.
 */
class LoaderStandartTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var LoaderStandart
	 */
	protected $object;

    /**
     *
     * @var vfsStream
     */
    protected $root;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new LoaderStandart;

        require_once 'vfsStream/vfsStream.php';
        \vfsStreamWrapper::register();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	/**
	 * @covers Ruon\Core\Loader\LoaderStandart::getLoadedClasses
	 * @covers Ruon\Core\Loader\LoaderStandart::setLoadedClasses
	 */
	public function testLoadedClasses()
	{
		$tester = new \Ruon\Lib\Test\Setter;
        $tester->test($this, $this->object, 'LoadedClasses');
	}

	/**
     * Тест с неописанным пространством имен
     *
	 * @covers Ruon\Core\Loader\LoaderStandart::load
	 * @covers Ruon\Core\Loader\LoaderAbstract::setPaths
	 */
	public function testLoad_UnexistsNamespace()
	{
		$this->assertFalse($this->object->load('Unexists\\Class'));
    }

	/**
     * Тест с несуществующим классом
     *
	 * @covers Ruon\Core\Loader\LoaderStandart::load
	 * @covers Ruon\Core\Loader\LoaderAbstract::setPaths
	 */
    public function testLoad_UnexistsClass()
    {
        $this->object->setPath('Ruon\\Core', __DIR__ . '/../');

		// no file
		$this->assertFalse($this->object->load('Ruon\\Core\\Unexists'));
    }

	/**
     * Тест на виртуальной файловой системе
     *
	 * @covers Ruon\Core\Loader\LoaderStandart::load
	 * @covers Ruon\Core\Loader\LoaderAbstract::setPaths
	 */
    public function testLoad_VirtualClass()
    {
        $classes = array(
            array(
                'namespace' => 'Ruon\\Core\\Loader',
                'class' => 'FirstTestClass' . time()
            ),
            array(
                'namespace' => 'Ruon\\Core',
                'class' => 'SecondTestClass' . time()
            )
        );

        foreach ($classes as &$class) {
            $class += \PHPUnit_Framework_MockObject_Generator::generate(
                'stdClass',
                null,
                $class['class']
            );
            $class['file'] = $class['class'] . '.php';

            $class['code'] =
                "<?php\n" .
                "namespace {$class['namespace']};\n" .
                str_replace(
                    array('extends ', 'implements '),
                    array('extends \\', 'implements \\'),
                    $class['code']
                );
            $class['file'] = $class['class'] . '.php';
        }

        $this->root = \vfsStream::setup(
            'root',
            null,
            array(
                'Ruon' => array(
                    'Core' => array(
                        'Loader' => array(
                            $classes[0]['file'] => $classes[0]['code']
                        ),
                        $classes[1]['file'] => $classes[1]['code']
                    )
                )
            )
        );

        $this->object->setPaths(array(
            'Ruon\\Core' => \vfsStream::url('root/Ruon/Core')
        ));

        foreach ($classes as $class) {
            $name = $class['namespace'] . '\\' . $class['class'];
            
            $this->assertTrue($this->object->load($name));
            $this->assertTrue($this->object->load($name));
        }
	}

}
