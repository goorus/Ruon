<?php

namespace Ruon\Core\Annotation;

require_once dirname (__FILE__) . '/../../../Core/Annotation/AnnotationSourceStandart.php';

/**
 *
 */
class EmptyClass
{

}

/**
 * @ ()
 * @ )
 */
class OtherEmptyClass
{

}

/**
 * @Id @Field(type="int",size=11,default=0)
 * @GeneratorAuto(auto)
 * @Parse(type="auto",params={"throw"="pass","value"="null"}) @Test
 * @Parse2(type={"s"="7"},auto)
 * @var string
 * @Wrong(
 * @Pass(test) @Assert
 * @desc Test
 * @Desc(auto) @Auto(desc) @Asc(auto)
 */
class TestClass
{
	/**
	 * @Id @Field (type = "int", size = 11, default = 0)
	 * @GeneratorAuto(auto)
	 * @Wrong()
	 * @QuotedKey("key"="value")
	 * @Parse(type="auto",params={"throw"="pass","value"="null",
	 *  "type"={"test"="7","v"={"t"="hello"} }
	 * }) @Test @Test2(
	 *	"t" = {
	 *		"t" = {
	 *			"t" = {
	 *				"t" = "5"
	 *			}
	 *		}
	 *	})
	 * @var string
	 * @Pass(test) @Assert
	 * @desc Test
	 * @Desc(auto) @Auto(desc) @Asc(auto)
	 * @Separated(type=1,
	 * get=7, m=3,
	 *	set=2) @IdTest @Test7 @ItIs(
	 *	st=2, ss=3
	 * )
	 */
	public $test;

	/**
	 * @Id @Field (type = "int", size = 11, default = 0)
	 * @GeneratorAuto(auto)
	 * @Wrong()
	 * @QuotedKey("key"="value")
	 * @Parse(type="auto",params={"throw"="pass","value"="null",
	 *  "type"={"test"="7","v"={"t"="hello"} }
	 * }) @Test @Test2(
	 *	"t" = {
	 *		"t" = {
	 *			"t" = {
	 *				"t" = "5"
	 *			}
	 *		}
	 *	})
	 * @var string
	 * @Pass(test) @Assert
	 * @desc Test
	 * @Desc(auto) @Auto(desc) @Asc(auto)
	 * @Separated(type=1,
	 * get=7, m=3,
	 *	set=2) @IdTest @Test7 @ItIs(
	 *	st=2, ss=3
	 * )
	 */
	public function test() { }
}

/**
 * Test class for AnnotationSourceStandart.
 * Generated by PHPUnit on 2012-09-18 at 18:23:44.
 */
class AnnotationSourceStandartTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var AnnotationSourceStandart
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this->object = new AnnotationSourceStandart;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{

	}

	/**
	 * @covers Ruon\Core\Annotation\AnnotationSourceStandart::getClass
	 * @covers Ruon\Core\Annotation\AnnotationSourceStandart::parse
	 * @covers Ruon\Core\Annotation\AnnotationSourceStandart::parsePart
	 * @covers Ruon\Core\Annotation\AnnotationSourceStandart::getReflection
	 * @covers Ruon\Core\Annotation\AnnotationSourceStandart::extract
	 */
	public function testGetClass ()
	{
		$emptyClass = new EmptyClass();
		$newObject = new AnnotationSourceStandart();
		$emptyScheme = $newObject->getClass($emptyClass);
		$this->assertEmpty($emptyScheme);

		$otherEmptyClass = new OtherEmptyClass();
		$otherNewObject = new AnnotationSourceStandart();
		$otherEmptyScheme = $otherNewObject->getClass($otherEmptyClass);
		$this->assertEmpty($otherEmptyScheme);

		$class = new TestClass();
		$scheme = $this->object->getClass($class);
		$this->assertArrayHasKey('Id', $scheme);
		$this->assertEquals('Id', $scheme['Id']);
		$this->assertArrayHasKey('Field', $scheme);
		$this->assertInternalType('array', $scheme['Field']);
		$this->assertArrayHasKey('type', $scheme['Field']);
		$this->assertEquals('int', $scheme['Field']['type']);
		$this->assertEquals(11, $scheme['Field']['size']);
		$this->assertArrayHasKey('GeneratorAuto', $scheme);
		$this->assertEquals('auto', $scheme['GeneratorAuto']['auto']);
		$this->assertArrayHasKey('Parse', $scheme);
		$this->assertArrayHasKey('type', $scheme['Parse']);
		$this->assertEquals('auto', $scheme['Parse']['type']);
		$this->assertInternalType('array', $scheme['Parse']['params']);
		$this->assertEquals('pass', $scheme['Parse']['params']['throw']);
		$this->assertEquals('null', $scheme['Parse']['params']['value']);
		$this->assertArrayHasKey('Test', $scheme);
		$this->assertArrayHasKey('Pass', $scheme);
		$this->assertEquals('test', $scheme['Pass']['test']);
		$this->assertEquals('Assert', $scheme['Assert']);
		$this->assertEquals('auto', $scheme['Desc']['auto']);
		$this->assertEquals('desc', $scheme['Auto']['desc']);
		$this->assertEquals('auto', $scheme['Asc']['auto']);
		$this->assertArrayHasKey('var string', $scheme);
		$this->assertArrayHasKey('desc Test', $scheme);
		$this->assertEquals('desc Test', $scheme['desc Test']);
		$this->assertArrayHasKey('Parse2', $scheme);
		$this->assertEquals(7, $scheme['Parse2']['type']['s']);
	}

	/**
	 * @covers Ruon\Core\Annotation\AnnotationSourceStandart::getMethods
	 */
	public function testGetMethods ()
	{
		$emptyClass = new EmptyClass();
		$newObject = new AnnotationSourceStandart();
		$emptyScheme = $newObject->getMethods($emptyClass);
		$this->assertEmpty($emptyScheme);
		$class = new TestClass();
		$methods = $this->object->getMethods($class);
		$method = reset($methods);
		$this->assertArrayHasKey('Id', $method);
		$this->assertEquals('Id', $method['Id']);
		$this->assertArrayHasKey('Field', $method);
		$this->assertInternalType('array', $method['Field']);
		$this->assertArrayHasKey('type', $method['Field']);
		$this->assertEquals('int', $method['Field']['type']);
		$this->assertEquals(11, $method['Field']['size']);
		$this->assertEquals(0, $method['Field']['default']);
		$this->assertArrayHasKey('GeneratorAuto', $method);
		$this->assertEquals('auto', $method['GeneratorAuto']['auto']);
		$this->assertArrayHasKey('Parse', $method);
		$this->assertArrayHasKey('type', $method['Parse']);
		$this->assertEquals('auto', $method['Parse']['type']);
		$this->assertInternalType('array', $method['Parse']['params']);
		$this->assertEquals('pass', $method['Parse']['params']['throw']);
		$this->assertEquals('null', $method['Parse']['params']['value']);
		$this->assertArrayHasKey('Test', $method);
		$this->assertArrayHasKey('Pass', $method);
		$this->assertEquals('test', $method['Pass']['test']);
		$this->assertEquals('Assert', $method['Assert']);
		$this->assertEquals('auto', $method['Desc']['auto']);
		$this->assertEquals('desc', $method['Auto']['desc']);
		$this->assertEquals('auto', $method['Asc']['auto']);
		$this->assertArrayHasKey('var string', $method);
		$this->assertArrayHasKey('desc Test', $method);
		$this->assertEquals('desc Test', $method['desc Test']);
		$this->assertArrayHasKey('QuotedKey', $method);
		$this->assertArrayHasKey('key', $method['QuotedKey']);
		$this->assertEquals('value', $method['QuotedKey']['key']);
		$this->assertArrayHasKey('Separated', $method);
		$this->assertEquals(1, $method['Separated']['type']);
		$this->assertEquals(2, $method['Separated']['set']);
		$this->assertArrayHasKey('ItIs', $method);
		$this->assertEquals(3, $method['ItIs']['ss']);
		$this->assertEquals(7, $method['Parse']['params']['type']['test']);
		$this->assertEquals('hello', $method['Parse']['params']['type']['v']['t']);
		$this->assertEquals(5, $method['Test2']['t']['t']['t']['t']);
	}

	/**
	 * @covers Ruon\Core\Annotation\AnnotationSourceStandart::getProperties
	 */
	public function testGetProperties ()
	{
		$emptyClass = new EmptyClass();
		$newObject = new AnnotationSourceStandart();
		$emptyScheme = $newObject->getProperties($emptyClass);
		$this->assertEmpty($emptyScheme);
		$class = new TestClass();
		$methods = $this->object->getProperties($class);
		$method = reset($methods);
		$this->assertArrayHasKey('Id', $method);
		$this->assertEquals('Id', $method['Id']);
		$this->assertArrayHasKey('Field', $method);
		$this->assertInternalType('array', $method['Field']);
		$this->assertArrayHasKey('type', $method['Field']);
		$this->assertEquals('int', $method['Field']['type']);
		$this->assertEquals(11, $method['Field']['size']);
		$this->assertEquals(0, $method['Field']['default']);
		$this->assertArrayHasKey('GeneratorAuto', $method);
		$this->assertEquals('auto', $method['GeneratorAuto']['auto']);
		$this->assertArrayHasKey('Parse', $method);
		$this->assertArrayHasKey('type', $method['Parse']);
		$this->assertEquals('auto', $method['Parse']['type']);
		$this->assertInternalType('array', $method['Parse']['params']);
		$this->assertEquals('pass', $method['Parse']['params']['throw']);
		$this->assertEquals('null', $method['Parse']['params']['value']);
		$this->assertArrayHasKey('Test', $method);
		$this->assertArrayHasKey('Pass', $method);
		$this->assertEquals('test', $method['Pass']['test']);
		$this->assertEquals('Assert', $method['Assert']);
		$this->assertEquals('auto', $method['Desc']['auto']);
		$this->assertEquals('desc', $method['Auto']['desc']);
		$this->assertEquals('auto', $method['Asc']['auto']);
		$this->assertArrayHasKey('var string', $method);
		$this->assertArrayHasKey('desc Test', $method);
		$this->assertEquals('desc Test', $method['desc Test']);
		$this->assertArrayHasKey('QuotedKey', $method);
		$this->assertArrayHasKey('key', $method['QuotedKey']);
		$this->assertEquals('value', $method['QuotedKey']['key']);
		$this->assertArrayHasKey('Separated', $method);
		$this->assertEquals(1, $method['Separated']['type']);
		$this->assertEquals(2, $method['Separated']['set']);
		$this->assertArrayHasKey('ItIs', $method);
		$this->assertEquals(3, $method['ItIs']['ss']);
		$this->assertEquals(7, $method['Parse']['params']['type']['test']);
		$this->assertEquals('hello', $method['Parse']['params']['type']['v']['t']);
		$this->assertEquals(5, $method['Test2']['t']['t']['t']['t']);
	}

}

?>
