<?php

namespace Ruon\Core\DependencyInjection\Injector;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-06 at 22:12:40.
 */
class InjectorAbstractTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var InjectorAbstract
     */
    protected $stub;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->stub = $this->getMockForAbstractClass(
            __NAMESPACE__ . '\\InjectorAbstract'
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Ruon\Core\DependencyInjection\Injector\InjectorAbstract::getInjetionService
     */
    public function testGetInjetionService_Empty()
    {
        $property = $this->getMock(
            'ReflectionProperty', 
            array('getDocComment'),
            array(),
            '',
            false
        );
        $property
            ->expects($this->once())
            ->method('getDocComment')
            ->will($this->returnValue("/**\n * @desc none \n */"));
        
        $class = $this->stub->getInjetionService($property);
        
        $this->assertNull($class);
    }
    
    /**
     * @covers Ruon\Core\DependencyInjection\Injector\InjectorAbstract::getInjetionService
     */
    public function testGetInjetionService_Inject()
    {
        $property = $this->getMock(
            'ReflectionProperty', 
            array('getDocComment'),
            array(),
            '',
            false
        );
        $property
            ->expects($this->once())
            ->method('getDocComment')
            ->will($this->returnValue("/**\n * @inject InjectClass\n */"));
        
        $class = $this->stub->getInjetionService($property);
        
        $this->assertEquals($class, 'InjectClass');
    }
    
    /**
     * @covers Ruon\Core\DependencyInjection\Injector\InjectorAbstract::getInjetionService
     */
    public function testGetInjetionService_InjectEmpty()
    {
        $property = $this->getMock(
            'ReflectionProperty', 
            array('getDocComment'),
            array(),
            '',
            false
        );
        $property
            ->expects($this->once())
            ->method('getDocComment')
            ->will($this->returnValue("/**\n * @inject \n */"));
        
        $class = $this->stub->getInjetionService($property);
        
        $this->assertNull($class);
    }
    
    /**
     * @covers Ruon\Core\DependencyInjection\Injector\InjectorAbstract::getInjetionService
     */
    public function testGetInjetionService_Var()
    {
        $property = $this->getMock(
            'ReflectionProperty', 
            array('getDocComment'),
            array(),
            '',
            false
        );
        $property
            ->expects($this->once())
            ->method('getDocComment')
            ->will($this->returnValue("/**\n * @inject\n @var VarClass\n */"));
        
        $class = $this->stub->getInjetionService($property);
        
        $this->assertEquals($class, 'VarClass');
    }

    /**
     * @covers Ruon\Core\DependencyInjection\Injector\InjectorAbstract::getSource
     * @covers Ruon\Core\DependencyInjection\Injector\InjectorAbstract::setSource
     */
    public function testSetSource()
    {
        $tester = new \Ruon\Lib\Test\Setter();
        $tester->test($this, $this->stub, 'Source');
    }

}
