<?php

namespace Ruon\Data;

/**
 * Test class for DataTransport.
 * Generated by PHPUnit on 2012-05-04 at 08:03:07.
 */
class DataTransportTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var DataTransport
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new DataTransport;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	/**
	 * @covers Ruon\Data\DataTransport::appendProvider
	 * @covers Ruon\Data\DataTransport::getProviders
	 * @covers Ruon\Data\DataTransport::removeProviders
	 */
	public function testAppendProvider()
	{
		$mock = $this;
		$this->object->appendProvider($mock);
		$this->assertContains($mock, $this->object->getProviders());

		$this->object->removeProviders();
		$this->assertEmpty($this->object->getProviders());
	}

	/**
	 * @covers Ruon\Data\DataTransport::flush
	 */
	public function testFlush()
	{
		$mockProvider = $this->getMock(
			'Ruon\\Data\\DataRepositoryArray',
			array('flush')
		);

		$mockProvider
			->expects($this->once())
			->method('flush')
			->with();

		$this->object->appendProvider($mockProvider);
		$this->object->flush();
	}

	/**
	 * @covers Ruon\Data\DataTransport::get
	 */
	public function testGet()
	{
		$mockProvider = $this->getMock(
			'Ruon\\Data\\DataRepositoryArray',
			array('get')
		);

		$mockProvider
			->expects($this->at(0))
			->method('get')
			->with('key1')
			->will($this->returnValue('value1'));

		$mockProvider
			->expects($this->at(1))
			->method('get')
			->with('key2')
			->will($this->returnValue(null));

		$mockProvider
			->expects($this->at(2))
			->method('get')
			->with('key2')
			->will($this->returnValue('null'));

		$this->object->appendProvider($mockProvider);

		$this->assertEquals('value1', $this->object->get('key1'));
		$this->assertEquals(null, $this->object->get('key2'));

		$this->object->set('key2', 'asdf');
		$this->assertEquals('null', $this->object->get('key2'));
	}

	/**
	 * @covers Ruon\Data\DataTransport::getAll
	 */
	public function testGetAll()
	{
		$mockProvider = $this->getMock('stdClass', array('getAll'));

		$mockProvider
			->expects($this->once())
			->method('getAll')
			->with()
			->will($this->returnValue(array('a' => 'b')));

		$this->object->appendProvider($mockProvider);

		$this->assertSame(array('a' => 'b'), $this->object->getAll());

		$this->object->removeProviders();
	}

	/**
	 * @covers Ruon\Data\DataTransport::getProvider
	 */
	public function testGetProvider()
	{
		$this->object->appendProvider('provider1');
		$this->object->appendProvider('provider2');

		$this->assertEquals('provider1', $this->object->getProvider(0));
		$this->assertEquals('provider2', $this->object->getProvider(1));

		$this->object->removeProviders();
	}

	/**
	 * @covers Ruon\Data\DataTransport::mset
	 */
	public function testMset()
	{
		$mockProvider = $this->getMock('stdClass', array('mset'));
		$mockProvider
			->expects($this->once())
			->method('mset')
			->with(array('key1' => 'value1'));

		$this->object->appendProvider($mockProvider);

		$this->assertSame(
			$this->object,
			$this->object->mset(array('key1' => 'value1'))
		);
	}

	/**
	 * @covers Ruon\Data\DataTransport::prependProvider
	 */
	public function testPrependProvider()
	{
		$this->object->prependProvider('provider1');
		$this->object->prependProvider('provider2');

		$this->assertEquals(
			array('provider2', 'provider1'),
			$this->object->getProviders()
		);

		$this->object->removeProviders();
	}

	/**
	 * @covers Ruon\Data\DataTransport::set
	 */
	public function testSet()
	{
		$mockProvider = $this->getMock('stdClass', array('set'));
		$mockProvider
			->expects($this->once())
			->method('set')
			->with('key', 'value');

		$this->object->appendProvider($mockProvider);

		$this->assertSame($this->object, $this->object->set('key', 'value'));
	}

}
